prototype(Medienreaktor.Meilisearch:Search) < prototype(Neos.Neos:ContentComponent) {
    searchTerm = ${String.toString(request.arguments.search)}
    searchQuery = ${this.searchTerm ? Search.query(site).fulltext(this.searchTerm).nodeType('Neos.Neos:Document') : null}

    page = ${String.toInteger(request.arguments.page) || 1}
    hitsPerPage = 10

    @context.paginatedSearchQuery = ${this.searchQuery.page(this.page).hitsPerPage(this.hitsPerPage)}

    totalPages = ${paginatedSearchQuery.totalPages()}
    totalHits = ${paginatedSearchQuery.totalHits()}

    searchResults = Neos.Fusion:Map {
        items = ${paginatedSearchQuery.execute()}
        itemName = 'node'
        itemRenderer = Medienreaktor.Meilisearch:Helper.SearchResultCase
        itemRenderer.@context {
            title = ${q(node).property('title')}
        }
    }

    renderer = afx`
        <div>
            <Medienreaktor.Meilisearch:Component.SearchForm searchTerm={props.searchTerm} />
            <div @if={props.searchResults}>
                <Medienreaktor.Meilisearch:Component.Pagination
                    searchTerm={props.searchTerm}
                    page={props.page}
                    hitsPerPage={props.hitsPerPage}
                    hits={Array.length(props.searchResults)}
                    totalPages={props.totalPages}
                    totalHits={props.totalHits} />
                <Medienreaktor.Meilisearch:Component.SearchResults searchResults={props.searchResults} />
            </div>
            <div @if={props.searchTerm && ! props.searchResults}>
                No results found.
            </div>
        </div>
    `

    @cache {
        mode = 'uncached'
        context {
            1 = 'site'
            2 = 'node'
            3 = 'documentNode'
        }
    }
}
